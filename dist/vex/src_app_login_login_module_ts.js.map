{"version":3,"file":"src_app_login_login_module_ts.js","mappings":";;;;;;;;;;;;;;;;;AAC+C;AACC;AAEG;;;AAInD,MAAM,MAAM,GAAc;IACxB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,4DAAc;KAC1B;CACF,CAAC;AAMK,MAAM,kBAAkB;;oFAAlB,kBAAkB;+GAAlB,kBAAkB;mHAHnB,kEAAqB,CAAC,MAAM,CAAC,EAC7B,yDAAY,EAAE,0DAAe;mIAE5B,kBAAkB,oFAFnB,yDAAY,EAAE,0DAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;AChByC;AAGT;;;;;;;;;;;;;ICc/D,4EAA6D;IAAA,4FAAiC;IAAA,4DAAY;;;IAMxG,0EAA8D;;;IAC9D,0EAAmE;;;IAGrE,4EAA6D;IAAA,2FAAgC;IAAA,4DAAY;;ADX5G,MAAM,cAAc;IAWzB,YAAoB,MAAc,EACxB,EAAsB,EACtB,EAAqB,EACrB,QAAqB,EACrB,YAAmC;QAJzB,WAAM,GAAN,MAAM,CAAQ;QACxB,OAAE,GAAF,EAAE,CAAoB;QACtB,OAAE,GAAF,EAAE,CAAmB;QACrB,aAAQ,GAAR,QAAQ,CAAa;QACrB,iBAAY,GAAZ,YAAY,CAAuB;QAX7C,cAAS,GAAG,UAAU,CAAC;QACvB,YAAO,GAAG,KAAK,CAAC;QAEhB,aAAQ,GAAG,EAAE;QACb,aAAQ,GAAG,EAAE;QACb,iBAAY,GAAG,KAAK;IAOhB,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxB,QAAQ,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;SACpC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAC9B,CAAC;IAED,IAAI;QACF,+BAA+B;QAC/B,IAAI,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EACpF;YACA,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,YAAY,GAAG,KAAK;YAEzB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;SAC7B;aAAM;YACL,KAAK,CAAC,iCAAiC,CAAC;YACxC,IAAI,CAAC,YAAY,GAAG,IAAI;YACxB,+BAA+B;YAC/B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;SAC7B;IAEH,CAAC;IAGD,OAAO;QACL,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IAEpB,CAAC;IAED,gBAAgB;QACd,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;YAC5B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;SACxB;aAAM;YACL,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;YACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;SACxB;IACH,CAAC;;4EA3DU,cAAc;4GAAd,cAAc;QCjB3B,yEAAgF;QAIxE,oEAAyB;QAC3B,4DAAM;QAGR,yEAA8B;QACN,4EAAiB;QAAA,4DAAK;QAC5C,wEAAsC;QAAA,+FAAoC;QAAA,4DAAK;QAGjF,0EAAwD;QAGvC,qEAAS;QAAA,4DAAY;QAChC,wEAAoD;QACpD,yHAA0G;QAC5G,4DAAiB;QACjB,sFAA+B;QAClB,oEAAQ;QAAA,4DAAY;QAC/B,6EAA8F;QAAvB,kJAAe,UAAM,IAAC;QAA7F,4DAA8F;QAC9F,8EAA4G;QAApG,uIAAS,sBAAkB,IAAC;QAClC,uHAA8D;QAC9D,uHAAmE;QACrE,4DAAS;QACT,4EAAU;QAAA,8FAAkC;QAAA,4DAAW;QACvD,yHAAyG;QAC3G,4DAAiB;QAQnB,8EAAyE;QAAjE,uIAAS,UAAM,IAAC;QACtB,mEACF;QAAA,4DAAS;QACT,8EAA4E;QAApE,uIAAS,aAAS,IAAC;QACzB,mEACF;QAAA,4DAAS;;QAzCR,0DAAS;QAAT,gFAAS;QAYP,0DAAkB;QAAlB,+EAAkB;QAKL,0DAA+C;QAA/C,+GAA+C;QAIpD,0DAAkB;QAAlB,+EAAkB;QAEZ,0DAAa;QAAb,6EAAa;QACb,0DAAc;QAAd,8EAAc;QAGf,0DAA+C;QAA/C,+GAA+C;uuCDfvD;YACV,kFAAa;SACd;;;;;;;;;;;;;;;;;;;;;;;;;;AEd4C;AAEa;AACT;AACe;AACT;AACF;AACS;AACH;AACF;AACI;;AAmBxD,MAAM,WAAW;;sEAAX,WAAW;wGAAX,WAAW;4GAbpB,yDAAY;QACZ,qEAAkB;QAClB,+DAAmB;QACnB,mEAAc;QACd,iEAAa;QACb,0EAAiB;QAEjB,uEAAgB;QAChB,qEAAe;QACf,0EAAiB;QACjB,uDAAW;mIAGF,WAAW,mBAfP,4DAAc,aAE3B,yDAAY;QACZ,qEAAkB;QAClB,+DAAmB;QACnB,mEAAc;QACd,iEAAa;QACb,0EAAiB;QAEjB,uEAAgB;QAChB,qEAAe;QACf,0EAAiB;QACjB,uDAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3Bf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;gBA0IiGW;;IAAAA,4DAC4L;IAD5LA,wDACkR;MADlRA,2DACkR;MAAA,eADlRA,2DACkR;MAAA,OADlRA,yDAC4R,iBAAV;IAAA;IADlRA,oDACuS;IADvSA,0DACsT;;;;mBADtTA;IAAAA,uDACuS;IADvSA,+DACuS;;;;;;AA1IxY,MAAM6B,kBAAkB,GAAG,IAAI5B,yDAAJ,CAAmB,iBAAnB,CAA3B;AACA;AACA;AACA;;AACA,MAAM6B,iBAAN,CAAwB;EACpBC,WAAW,GAAG;IACV;IACA,KAAKC,UAAL,GAAkB,WAAlB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,mBAAL,GAA2B,EAA3B;IACA;;IACA,KAAKC,QAAL,GAAgB,CAAhB;IACA;;IACA,KAAKC,IAAL,GAAY,IAAZ;IACA;;IACA,KAAKC,kBAAL,GAA0B,QAA1B;IACA;;IACA,KAAKC,gBAAL,GAAwB,QAAxB;EACH;;AAjBmB;AAoBxB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAtC;AACA;AACA;AACA;;AACA,MAAMC,cAAN,CAAqB;EACjBV,WAAW,CAACW,iBAAD,EAAoBC,WAApB,EAAiC;IACxC,KAAKA,WAAL,GAAmBA,WAAnB;IACA;;IACA,KAAKC,eAAL,GAAuB,IAAI3B,yCAAJ,EAAvB;IACA;;IACA,KAAK4B,YAAL,GAAoB,IAAI5B,yCAAJ,EAApB;IACA;;IACA,KAAK6B,SAAL,GAAiB,IAAI7B,yCAAJ,EAAjB;IACA;;IACA,KAAK8B,kBAAL,GAA0B,KAA1B;IACA,KAAKL,iBAAL,GAAyBA,iBAAzB;;IACAA,iBAAiB,CAACM,OAAlB,CAA0BC,SAA1B,CAAoC,MAAM,KAAKC,cAAL,EAA1C;EACH;EACD;;;EACAC,OAAO,GAAG;IACN,IAAI,CAAC,KAAKP,eAAL,CAAqBQ,MAA1B,EAAkC;MAC9B,KAAKV,iBAAL,CAAuBW,IAAvB;IACH;;IACDC,YAAY,CAAC,KAAKC,kBAAN,CAAZ;EACH;EACD;;;EACAC,iBAAiB,GAAG;IAChB,IAAI,CAAC,KAAKV,SAAL,CAAeM,MAApB,EAA4B;MACxB,KAAKL,kBAAL,GAA0B,IAA1B;;MACA,KAAKD,SAAL,CAAeW,IAAf;;MACA,KAAKX,SAAL,CAAeY,QAAf;;MACA,KAAKP,OAAL;IACH;;IACDG,YAAY,CAAC,KAAKC,kBAAN,CAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACII,eAAe,GAAG;IACd,KAAKH,iBAAL;EACH;EACD;;;EACAI,aAAa,CAAC1B,QAAD,EAAW;IACpB;IACA;IACA,KAAKqB,kBAAL,GAA0BM,UAAU,CAAC,MAAM,KAAKV,OAAL,EAAP,EAAuBZ,IAAI,CAACuB,GAAL,CAAS5B,QAAT,EAAmBI,WAAnB,CAAvB,CAApC;EACH;EACD;;;EACAyB,KAAK,GAAG;IACJ,IAAI,CAAC,KAAKlB,YAAL,CAAkBO,MAAvB,EAA+B;MAC3B,KAAKP,YAAL,CAAkBY,IAAlB;;MACA,KAAKZ,YAAL,CAAkBa,QAAlB;IACH;EACJ;EACD;;;EACAR,cAAc,GAAG;IACb,KAAKP,WAAL,CAAiBqB,OAAjB;;IACA,IAAI,CAAC,KAAKlB,SAAL,CAAeM,MAApB,EAA4B;MACxB,KAAKN,SAAL,CAAeY,QAAf;IACH;;IACD,KAAKd,eAAL,CAAqBa,IAArB,CAA0B;MAAEQ,iBAAiB,EAAE,KAAKlB;IAA1B,CAA1B;;IACA,KAAKH,eAAL,CAAqBc,QAArB;;IACA,KAAKX,kBAAL,GAA0B,KAA1B;EACH;EACD;;;EACAmB,cAAc,GAAG;IACb,OAAO,KAAKtB,eAAZ;EACH;EACD;;;EACAuB,WAAW,GAAG;IACV,OAAO,KAAKzB,iBAAL,CAAuB0B,QAA9B;EACH;EACD;;;EACAC,QAAQ,GAAG;IACP,OAAO,KAAKvB,SAAZ;EACH;;AAzEgB;AA4ErB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMwB,cAAN,CAAqB;EACjBvC,WAAW,CAACwC,WAAD,EAAcpC,IAAd,EAAoB;IAC3B,KAAKoC,WAAL,GAAmBA,WAAnB;IACA,KAAKpC,IAAL,GAAYA,IAAZ;EACH;EACD;;;EACAqC,MAAM,GAAG;IACL,KAAKD,WAAL,CAAiBf,iBAAjB;EACH;EACD;;;EACa,IAATiB,SAAS,GAAG;IACZ,OAAO,CAAC,CAAC,KAAKtC,IAAL,CAAUqC,MAAnB;EACH;;AAZgB;;AAcrBF,cAAc,CAACI,IAAf;EAAA,iBAA2GJ,cAA3G,EAAiGtE,+DAAjG,CAA2IyC,cAA3I,GAAiGzC,+DAAjG,CAAsK6B,kBAAtK;AAAA;;AACAyC,cAAc,CAACK,IAAf,kBADiG3E,+DACjG;EAAA,MAA+FsE,cAA/F;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;IAAA;MADiGtE,4DACsH,cAAvN;MADiGA,oDACmK,GAApQ;MADiGA,0DACmL,EAApR;MADiGA,wDAC4L,kDAA7R;IAAA;;IAAA;MADiGA,uDACmK,GAApQ;MADiGA,+DACmK,kBAApQ;MADiGA,uDACwO,GAAzU;MADiGA,wDACwO,uBAAzU;IAAA;EAAA;EAAA,eAAm2BF,iDAAn2B,EAAu8BiB,+DAAv8B;EAAA;EAAA;EAAA;AAAA;;AACA;EAAA,mDAFiGf,+DAEjG,CAA2FsE,cAA3F,EAAuH,CAAC;IAC5GQ,IAAI,EAAE5E,oDADsG;IAE5G6E,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAE,kBAAZ;MAAgCC,aAAa,EAAE9E,iEAA/C;MAAuEgF,eAAe,EAAE/E,yEAAxF;MAAwHiF,IAAI,EAAE;QACzH,SAAS;MADgH,CAA9H;MAEIC,QAAQ,EAAE,qNAFd;MAEqOC,MAAM,EAAE,CAAC,gYAAD;IAF7O,CAAD;EAFsG,CAAD,CAAvH,EAK4B,YAAY;IAAE,OAAO,CAAC;MAAET,IAAI,EAAErC;IAAR,CAAD,EAA2B;MAAEqC,IAAI,EAAEU,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACxFX,IAAI,EAAEzE,iDADkF;QAExF0E,IAAI,EAAE,CAAClD,kBAAD;MAFkF,CAAD;IAA/B,CAA3B,CAAP;EAGlB,CARxB;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAM6D,qBAAqB,GAAG;EAC1B;EACAC,aAAa,EAAEtE,4DAAO,CAAC,OAAD,EAAU,CAC5BC,0DAAK,CAAC,cAAD,EAAiBC,0DAAK,CAAC;IACxBqE,SAAS,EAAE,YADa;IAExBC,OAAO,EAAE;EAFe,CAAD,CAAtB,CADuB,EAK5BvE,0DAAK,CAAC,SAAD,EAAYC,0DAAK,CAAC;IACnBqE,SAAS,EAAE,UADQ;IAEnBC,OAAO,EAAE;EAFU,CAAD,CAAjB,CALuB,EAS5BrE,+DAAU,CAAC,cAAD,EAAiBC,4DAAO,CAAC,kCAAD,CAAxB,CATkB,EAU5BD,+DAAU,CAAC,wBAAD,EAA2BC,4DAAO,CAAC,mCAAD,EAAsCF,0DAAK,CAAC;IACpFsE,OAAO,EAAE;EAD2E,CAAD,CAA3C,CAAlC,CAVkB,CAAV;AAFI,CAA9B;AAkBA;AACA;AACA;AACA;;AACA,MAAMC,yBAAN,SAAwCrG,iEAAxC,CAAyD;EACrDsC,WAAW,CAACgE,OAAD,EAAUC,WAAV,EAAuBC,kBAAvB,EAA2CC,SAA3C;EACX;EACAC,cAFW,EAEK;IACZ;IACA,KAAKJ,OAAL,GAAeA,OAAf;IACA,KAAKC,WAAL,GAAmBA,WAAnB;IACA,KAAKC,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IACA,KAAKC,cAAL,GAAsBA,cAAtB;IACA;;IACA,KAAKC,cAAL,GAAsB,GAAtB;IACA;;IACA,KAAKC,UAAL,GAAkB,KAAlB;IACA;;IACA,KAAKC,WAAL,GAAmB,IAAIrF,yCAAJ,EAAnB;IACA;;IACA,KAAK+B,OAAL,GAAe,IAAI/B,yCAAJ,EAAf;IACA;;IACA,KAAKmD,QAAL,GAAgB,IAAInD,yCAAJ,EAAhB;IACA;;IACA,KAAKsF,eAAL,GAAuB,MAAvB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,eAAL,GAAwBC,MAAD,IAAY;MAC/B,KAAKC,kBAAL;;MACA,MAAMC,MAAM,GAAG,KAAKC,aAAL,CAAmBJ,eAAnB,CAAmCC,MAAnC,CAAf;;MACA,KAAKI,oBAAL;;MACA,OAAOF,MAAP;IACH,CALD,CAxBY,CA8BZ;IACA;;;IACA,IAAIR,cAAc,CAACnE,UAAf,KAA8B,WAA9B,IAA6C,CAACmE,cAAc,CAAClE,mBAAjE,EAAsF;MAClF,KAAK6E,KAAL,GAAa,WAAb;IACH,CAFD,MAGK,IAAIX,cAAc,CAACnE,UAAf,KAA8B,KAAlC,EAAyC;MAC1C,KAAK8E,KAAL,GAAa,KAAb;IACH,CAFI,MAGA;MACD,KAAKA,KAAL,GAAa,QAAb;IACH,CAxCW,CAyCZ;IACA;;;IACA,IAAI,KAAKZ,SAAL,CAAea,OAAnB,EAA4B;MACxB,IAAI,KAAKD,KAAL,KAAe,QAAnB,EAA6B;QACzB,KAAKE,KAAL,GAAa,QAAb;MACH;;MACD,IAAI,KAAKF,KAAL,KAAe,WAAnB,EAAgC;QAC5B,KAAKE,KAAL,GAAa,OAAb;MACH;IACJ;EACJ;EACD;;;EACAC,qBAAqB,CAACR,MAAD,EAAS;IAC1B,KAAKC,kBAAL;;IACA,MAAMC,MAAM,GAAG,KAAKC,aAAL,CAAmBK,qBAAnB,CAAyCR,MAAzC,CAAf;;IACA,KAAKI,oBAAL;;IACA,OAAOF,MAAP;EACH;EACD;;;EACAO,oBAAoB,CAACT,MAAD,EAAS;IACzB,KAAKC,kBAAL;;IACA,MAAMC,MAAM,GAAG,KAAKC,aAAL,CAAmBM,oBAAnB,CAAwCT,MAAxC,CAAf;;IACA,KAAKI,oBAAL;;IACA,OAAOF,MAAP;EACH;EACD;;;EACAQ,cAAc,CAACC,KAAD,EAAQ;IAClB,MAAM;MAAEC,SAAF;MAAaC;IAAb,IAAyBF,KAA/B;;IACA,IAAKE,OAAO,KAAK,MAAZ,IAAsBD,SAAS,KAAK,MAArC,IAAgDC,OAAO,KAAK,QAAhE,EAA0E;MACtE,KAAKC,aAAL;IACH;;IACD,IAAID,OAAO,KAAK,SAAhB,EAA2B;MACvB;MACA;MACA,MAAME,OAAO,GAAG,KAAKpD,QAArB;;MACA,KAAK2B,OAAL,CAAa0B,GAAb,CAAiB,MAAM;QACnBD,OAAO,CAAC/D,IAAR;QACA+D,OAAO,CAAC9D,QAAR;MACH,CAHD;IAIH;EACJ;EACD;;;EACAgE,KAAK,GAAG;IACJ,IAAI,CAAC,KAAKrB,UAAV,EAAsB;MAClB,KAAKE,eAAL,GAAuB,SAAvB;;MACA,KAAKN,kBAAL,CAAwB0B,aAAxB;;MACA,KAAKC,qBAAL;IACH;EACJ;EACD;;;EACAvE,IAAI,GAAG;IACH;IACA;IACA,KAAK0C,OAAL,CAAa0B,GAAb,CAAiB,MAAM;MACnB;MACA;MACA;MACA,KAAKlB,eAAL,GAAuB,QAAvB,CAJmB,CAKnB;MACA;MACA;;MACA,KAAKP,WAAL,CAAiB6B,aAAjB,CAA+BC,YAA/B,CAA4C,UAA5C,EAAwD,EAAxD,EARmB,CASnB;MACA;;;MACAxE,YAAY,CAAC,KAAKyE,kBAAN,CAAZ;IACH,CAZD;;IAaA,OAAO,KAAK/E,OAAZ;EACH;EACD;;;EACAgF,WAAW,GAAG;IACV,KAAK3B,UAAL,GAAkB,IAAlB;;IACA,KAAKkB,aAAL;EACH;EACD;AACJ;AACA;AACA;;;EACIA,aAAa,GAAG;IACZ,KAAKxB,OAAL,CAAakC,gBAAb,CAA8BC,IAA9B,CAAmC/G,oDAAI,CAAC,CAAD,CAAvC,EAA4C8B,SAA5C,CAAsD,MAAM;MACxD,KAAK8C,OAAL,CAAa0B,GAAb,CAAiB,MAAM;QACnB,KAAKzE,OAAL,CAAaS,IAAb;;QACA,KAAKT,OAAL,CAAaU,QAAb;MACH,CAHD;IAIH,CALD;EAMH;EACD;AACJ;AACA;AACA;;;EACImD,oBAAoB,GAAG;IACnB,MAAMsB,OAAO,GAAG,KAAKnC,WAAL,CAAiB6B,aAAjC;IACA,MAAMO,YAAY,GAAG,KAAKjC,cAAL,CAAoBkC,UAAzC;;IACA,IAAID,YAAJ,EAAkB;MACd,IAAIE,KAAK,CAACC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;QAC7B;QACAA,YAAY,CAACI,OAAb,CAAqBC,QAAQ,IAAIN,OAAO,CAACO,SAAR,CAAkBC,GAAlB,CAAsBF,QAAtB,CAAjC;MACH,CAHD,MAIK;QACDN,OAAO,CAACO,SAAR,CAAkBC,GAAlB,CAAsBP,YAAtB;MACH;IACJ;EACJ;EACD;;;EACA1B,kBAAkB,GAAG;IACjB,IAAI,KAAKE,aAAL,CAAmBgC,WAAnB,OAAqC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAzE,CAAJ,EAAyF;MACrF,MAAMC,KAAK,CAAC,0EAAD,CAAX;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACIlB,qBAAqB,GAAG;IACpB,IAAI,CAAC,KAAKG,kBAAV,EAA8B;MAC1B,KAAKhC,OAAL,CAAagD,iBAAb,CAA+B,MAAM;QACjC,KAAKhB,kBAAL,GAA0BlE,UAAU,CAAC,MAAM;UACvC,MAAMmF,YAAY,GAAG,KAAKhD,WAAL,CAAiB6B,aAAjB,CAA+BoB,aAA/B,CAA6C,eAA7C,CAArB;;UACA,MAAMC,WAAW,GAAG,KAAKlD,WAAL,CAAiB6B,aAAjB,CAA+BoB,aAA/B,CAA6C,aAA7C,CAApB;;UACA,IAAID,YAAY,IAAIE,WAApB,EAAiC;YAAA;;YAC7B;YACA;YACA,IAAIC,cAAc,GAAG,IAArB;;YACA,IAAI,KAAKjD,SAAL,CAAekD,SAAf,IACAC,QAAQ,CAACC,aAAT,YAAkCC,WADlC,IAEAP,YAAY,CAACQ,QAAb,CAAsBH,QAAQ,CAACC,aAA/B,CAFJ,EAEmD;cAC/CH,cAAc,GAAGE,QAAQ,CAACC,aAA1B;YACH;;YACDN,YAAY,CAACS,eAAb,CAA6B,aAA7B;YACAP,WAAW,CAACQ,WAAZ,CAAwBV,YAAxB;YACA,mBAAAG,cAAc,UAAd,0DAAgBQ,KAAhB;;YACA,KAAKrD,WAAL,CAAiB7C,IAAjB;;YACA,KAAK6C,WAAL,CAAiB5C,QAAjB;UACH;QACJ,CAlBmC,EAkBjC,KAAK0C,cAlB4B,CAApC;MAmBH,CApBD;IAqBH;EACJ;;AApLoD;;AAsLzDN,yBAAyB,CAACpB,IAA1B;EAAA,iBAAsHoB,yBAAtH,EAnOiG9F,+DAmOjG,CAAiKA,iDAAjK,GAnOiGA,+DAmOjG,CAAuLA,qDAAvL,GAnOiGA,+DAmOjG,CAAiNA,4DAAjN,GAnOiGA,+DAmOjG,CAAkPkB,2DAAlP,GAnOiGlB,+DAmOjG,CAA0Q8B,iBAA1Q;AAAA;;AACAgE,yBAAyB,CAACkE,IAA1B,kBApOiGhK,+DAoOjG;EAAA,MAA0G8F,yBAA1G;EAAA;IAAA;MApOiG9F,yDAoOjG,CAA4MN,gEAA5M;IAAA;;IAAA;MAAA;;MApOiGM,4DAoOjG,MApOiGA,yDAoOjG;IAAA;EAAA;EAAA,WApOiGA,wEAoOjG;AAAA;;AACA;EAAA,mDArOiGA,+DAqOjG,CAA2F8F,yBAA3F,EAAkI,CAAC;IACvHhB,IAAI,EAAExE,oDAASA;EADwG,CAAD,CAAlI,EAE4B,YAAY;IAAE,OAAO,CAAC;MAAEwE,IAAI,EAAE9E,iDAAS4J;IAAjB,CAAD,EAAsB;MAAE9E,IAAI,EAAE9E,qDAAa6J;IAArB,CAAtB,EAA+C;MAAE/E,IAAI,EAAE9E,4DAAoB8J;IAA5B,CAA/C,EAA+E;MAAEhF,IAAI,EAAE5D,2DAAW6I;IAAnB,CAA/E,EAAsG;MAAEjF,IAAI,EAAEhD;IAAR,CAAtG,CAAP;EAA4I,CAFtL,EAEwM;IAAE8E,aAAa,EAAE,CAAC;MAC1M9B,IAAI,EAAEvE,oDADoM;MAE1MwE,IAAI,EAAE,CAACrF,gEAAD,EAAkB;QAAEuK,MAAM,EAAE;MAAV,CAAlB;IAFoM,CAAD;EAAjB,CAFxM;AAAA;AAMA;AACA;AACA;AACA;;;AACA,MAAMC,oBAAN,SAAmCpE,yBAAnC,CAA6D;EACzDe,oBAAoB,GAAG;IACnB,MAAMA,oBAAN;;IACA,IAAI,KAAKV,cAAL,CAAoB/D,kBAApB,KAA2C,QAA/C,EAAyD;MACrD,KAAK4D,WAAL,CAAiB6B,aAAjB,CAA+Ba,SAA/B,CAAyCC,GAAzC,CAA6C,sBAA7C;IACH;;IACD,IAAI,KAAKxC,cAAL,CAAoB9D,gBAApB,KAAyC,KAA7C,EAAoD;MAChD,KAAK2D,WAAL,CAAiB6B,aAAjB,CAA+Ba,SAA/B,CAAyCC,GAAzC,CAA6C,mBAA7C;IACH;EACJ;;AATwD;;AAW7DuB,oBAAoB,CAACxF,IAArB;EAAA;EAAA;IAAA,kFA1PiG1E,mEA0PjG,CAAiHkK,oBAAjH,SAAiHA,oBAAjH;EAAA;AAAA;;AACAA,oBAAoB,CAACvF,IAArB,kBA3PiG3E,+DA2PjG;EAAA,MAAqGkK,oBAArG;EAAA;EAAA;EAAA;EAAA;IAAA;MA3PiGlK,qEA2PjG;QAAA,OAAqG,0BAArG;MAAA;IAAA;;IAAA;MA3PiGA,qEA2PjG;IAAA;EAAA;EAAA,WA3PiGA,wEA2PjG;EAAA;EAAA;EAAA;EAAA;IAAA;MA3PiGA,4DA2PwW,aAAzc;MA3PiGA,wDA2PsY,wEAAve;MA3PiGA,0DA2Pmb,EAAphB;MA3PiGA,uDA2P8iB,UAA/oB;IAAA;;IAAA;MA3PiGA,uDA2PmjB,GAAppB;MA3PiGA,yDA2PmjB,2CAAppB;IAAA;EAAA;EAAA,eAAmoCR,gEAAnoC;EAAA;EAAA;EAAA;IAAA,WAA0xC,CAACkG,qBAAqB,CAACC,aAAvB;EAA1xC;AAAA;;AACA;EAAA,mDA5PiG3F,+DA4PjG,CAA2FkK,oBAA3F,EAA6H,CAAC;IAClHpF,IAAI,EAAE5E,oDAD4G;IAElH6E,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAE,qBAAZ;MAAmCG,eAAe,EAAE/E,0EAApD;MAAqF6E,aAAa,EAAE9E,iEAApG;MAA4HiK,UAAU,EAAE,CAAC1E,qBAAqB,CAACC,aAAvB,CAAxI;MAA+KN,IAAI,EAAE;QAChL,SAAS,yBADuK;QAEhL,YAAY,iBAFoK;QAGhL,iBAAiB;MAH+J,CAArL;MAIIC,QAAQ,EAAE,yWAJd;MAIyXC,MAAM,EAAE,CAAC,6XAAD;IAJjY,CAAD;EAF4G,CAAD,CAA7H;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM8E,iBAAN,CAAwB;;AAExBA,iBAAiB,CAAC3F,IAAlB;EAAA,iBAA8G2F,iBAA9G;AAAA;;AACAA,iBAAiB,CAACC,IAAlB,kBA/QiGtK,8DA+QjG;EAAA,MAA+GqK;AAA/G;AACAA,iBAAiB,CAACE,IAAlB,kBAhRiGvK,8DAgRjG;EAAA,UAA4IV,+DAA5I,EAA2JK,6DAA3J,EAAyKI,yDAAzK,EAAuLiB,qEAAvL,EAAwMF,mEAAxM,EAAyNA,mEAAzN;AAAA;;AACA;EAAA,mDAjRiGd,+DAiRjG,CAA2FqK,iBAA3F,EAA0H,CAAC;IAC/GvF,IAAI,EAAEtE,mDADyG;IAE/GuE,IAAI,EAAE,CAAC;MACCyF,OAAO,EAAE,CAAClL,+DAAD,EAAgBK,6DAAhB,EAA8BI,yDAA9B,EAA4CiB,qEAA5C,EAA6DF,mEAA7D,CADV;MAEC2J,OAAO,EAAE,CAACP,oBAAD,EAAuBpJ,mEAAvB,CAFV;MAGC4J,YAAY,EAAE,CAACR,oBAAD,EAAuB5F,cAAvB;IAHf,CAAD;EAFyG,CAAD,CAA1H;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMqG,6BAA6B,GAAG,IAAI1K,yDAAJ,CAAmB,+BAAnB,EAAoD;EACtF2K,UAAU,EAAE,MAD0E;EAEtFC,OAAO,EAAEC;AAF6E,CAApD,CAAtC;AAIA;;AACA,SAASA,qCAAT,GAAiD;EAC7C,OAAO,IAAIhJ,iBAAJ,EAAP;AACH;;AACD,MAAMiJ,gBAAN,CAAuB;EACnBhJ,WAAW,CAACiJ,QAAD,EAAWlE,KAAX,EAAkBmE,SAAlB,EAA6BC,mBAA7B,EAAkDC,eAAlD,EAAmEC,cAAnE,EAAmF;IAC1F,KAAKJ,QAAL,GAAgBA,QAAhB;IACA,KAAKlE,KAAL,GAAaA,KAAb;IACA,KAAKmE,SAAL,GAAiBA,SAAjB;IACA,KAAKC,mBAAL,GAA2BA,mBAA3B;IACA,KAAKC,eAAL,GAAuBA,eAAvB;IACA,KAAKC,cAAL,GAAsBA,cAAtB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,uBAAL,GAA+B,IAA/B;EACH;EACD;;;EACsB,IAAlBC,kBAAkB,GAAG;IACrB,MAAMC,MAAM,GAAG,KAAKJ,eAApB;IACA,OAAOI,MAAM,GAAGA,MAAM,CAACD,kBAAV,GAA+B,KAAKD,uBAAjD;EACH;;EACqB,IAAlBC,kBAAkB,CAACE,KAAD,EAAQ;IAC1B,IAAI,KAAKL,eAAT,EAA0B;MACtB,KAAKA,eAAL,CAAqBG,kBAArB,GAA0CE,KAA1C;IACH,CAFD,MAGK;MACD,KAAKH,uBAAL,GAA+BG,KAA/B;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIC,iBAAiB,CAACC,SAAD,EAAYC,MAAZ,EAAoB;IACjC,OAAO,KAAKC,OAAL,CAAaF,SAAb,EAAwBC,MAAxB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIE,gBAAgB,CAACvG,QAAD,EAAWqG,MAAX,EAAmB;IAC/B,OAAO,KAAKC,OAAL,CAAatG,QAAb,EAAuBqG,MAAvB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIG,IAAI,CAACC,OAAD,EAAUvH,MAAM,GAAG,EAAnB,EAAuBmH,MAAvB,EAA+B;IAC/B,MAAMK,OAAO,GAAG,EAAE,GAAG,KAAKZ,cAAV;MAA0B,GAAGO;IAA7B,CAAhB,CAD+B,CAE/B;IACA;;IACAK,OAAO,CAAC7J,IAAR,GAAe;MAAE4J,OAAF;MAAWvH;IAAX,CAAf,CAJ+B,CAK/B;IACA;;IACA,IAAIwH,OAAO,CAAC/J,mBAAR,KAAgC8J,OAApC,EAA6C;MACzCC,OAAO,CAAC/J,mBAAR,GAA8BuD,SAA9B;IACH;;IACD,OAAO,KAAKiG,iBAAL,CAAuB,KAAKQ,uBAA5B,EAAqDD,OAArD,CAAP;EACH;EACD;AACJ;AACA;;;EACI7I,OAAO,GAAG;IACN,IAAI,KAAKmI,kBAAT,EAA6B;MACzB,KAAKA,kBAAL,CAAwBnI,OAAxB;IACH;EACJ;;EACD6E,WAAW,GAAG;IACV;IACA,IAAI,KAAKqD,uBAAT,EAAkC;MAC9B,KAAKA,uBAAL,CAA6BlI,OAA7B;IACH;EACJ;EACD;AACJ;AACA;;;EACI+I,wBAAwB,CAACC,UAAD,EAAaR,MAAb,EAAqB;IACzC,MAAMS,YAAY,GAAGT,MAAM,IAAIA,MAAM,CAACU,gBAAjB,IAAqCV,MAAM,CAACU,gBAAP,CAAwBC,QAAlF;IACA,MAAMA,QAAQ,GAAG7L,0DAAA,CAAgB;MAC7B8K,MAAM,EAAEa,YAAY,IAAI,KAAKnB,SADA;MAE7BuB,SAAS,EAAE,CAAC;QAAEC,OAAO,EAAE3K,iBAAX;QAA8B4K,QAAQ,EAAEf;MAAxC,CAAD;IAFkB,CAAhB,CAAjB;IAIA,MAAMgB,eAAe,GAAG,IAAI/M,gEAAJ,CAAoB,KAAKgN,0BAAzB,EAAqDjB,MAAM,CAACU,gBAA5D,EAA8EC,QAA9E,CAAxB;IACA,MAAMO,YAAY,GAAGV,UAAU,CAACW,MAAX,CAAkBH,eAAlB,CAArB;IACAE,YAAY,CAACE,QAAb,CAAsB5G,cAAtB,GAAuCwF,MAAvC;IACA,OAAOkB,YAAY,CAACE,QAApB;EACH;EACD;AACJ;AACA;;;EACInB,OAAO,CAACoB,OAAD,EAAUC,UAAV,EAAsB;IACzB,MAAMtB,MAAM,GAAG,EAAE,GAAG,IAAI7J,iBAAJ,EAAL;MAA8B,GAAG,KAAKsJ,cAAtC;MAAsD,GAAG6B;IAAzD,CAAf;;IACA,MAAMd,UAAU,GAAG,KAAKe,cAAL,CAAoBvB,MAApB,CAAnB;;IACA,MAAMwB,SAAS,GAAG,KAAKjB,wBAAL,CAA8BC,UAA9B,EAA0CR,MAA1C,CAAlB;;IACA,MAAMpH,WAAW,GAAG,IAAI9B,cAAJ,CAAmB0K,SAAnB,EAA8BhB,UAA9B,CAApB;;IACA,IAAIa,OAAO,YAAYtM,sDAAvB,EAAoC;MAChC,MAAM+F,MAAM,GAAG,IAAI5G,+DAAJ,CAAmBmN,OAAnB,EAA4B,IAA5B,EAAkC;QAC7CI,SAAS,EAAEzB,MAAM,CAACxJ,IAD2B;QAE7CoC;MAF6C,CAAlC,CAAf;MAIAA,WAAW,CAACwI,QAAZ,GAAuBI,SAAS,CAACjG,oBAAV,CAA+BT,MAA/B,CAAvB;IACH,CAND,MAOK;MACD,MAAM6F,QAAQ,GAAG,KAAKe,eAAL,CAAqB1B,MAArB,EAA6BpH,WAA7B,CAAjB;;MACA,MAAMkC,MAAM,GAAG,IAAI7G,gEAAJ,CAAoBoN,OAApB,EAA6BxH,SAA7B,EAAwC8G,QAAxC,CAAf;MACA,MAAMgB,UAAU,GAAGH,SAAS,CAAClG,qBAAV,CAAgCR,MAAhC,CAAnB,CAHC,CAID;;MACAlC,WAAW,CAACwI,QAAZ,GAAuBO,UAAU,CAACP,QAAlC;IACH,CAlBwB,CAmBzB;IACA;IACA;;;IACA,KAAK7B,mBAAL,CACKqC,OADL,CACa3L,6EADb,EAEKsG,IAFL,CAEU9G,0DAAS,CAAC+K,UAAU,CAACsB,WAAX,EAAD,CAFnB,EAGKxK,SAHL,CAGe3B,KAAK,IAAI;MACpB6K,UAAU,CAACuB,cAAX,CAA0BhF,SAA1B,CAAoCiF,MAApC,CAA2C,KAAKC,eAAhD,EAAiEtM,KAAK,CAACuM,OAAvE;IACH,CALD;;IAMA,IAAIlC,MAAM,CAAC1J,mBAAX,EAAgC;MAC5B;MACAkL,SAAS,CAAC7G,WAAV,CAAsBrD,SAAtB,CAAgC,MAAM;QAClC,KAAK6D,KAAL,CAAWgH,QAAX,CAAoBnC,MAAM,CAAC1J,mBAA3B,EAAgD0J,MAAM,CAAC3J,UAAvD;MACH,CAFD;IAGH;;IACD,KAAK+L,gBAAL,CAAsBxJ,WAAtB,EAAmCoH,MAAnC;;IACA,KAAKL,kBAAL,GAA0B/G,WAA1B;IACA,OAAO,KAAK+G,kBAAZ;EACH;EACD;;;EACAyC,gBAAgB,CAACxJ,WAAD,EAAcoH,MAAd,EAAsB;IAClC;IACApH,WAAW,CAACL,cAAZ,GAA6BjB,SAA7B,CAAuC,MAAM;MACzC;MACA,IAAI,KAAKqI,kBAAL,IAA2B/G,WAA/B,EAA4C;QACxC,KAAK+G,kBAAL,GAA0B,IAA1B;MACH;;MACD,IAAIK,MAAM,CAAC1J,mBAAX,EAAgC;QAC5B,KAAK6E,KAAL,CAAWkH,KAAX;MACH;IACJ,CARD;;IASA,IAAI,KAAK1C,kBAAT,EAA6B;MACzB;MACA;MACA,KAAKA,kBAAL,CAAwBpH,cAAxB,GAAyCjB,SAAzC,CAAmD,MAAM;QACrDsB,WAAW,CAAC7B,iBAAZ,CAA8BgF,KAA9B;MACH,CAFD;;MAGA,KAAK4D,kBAAL,CAAwBnI,OAAxB;IACH,CAPD,MAQK;MACD;MACAoB,WAAW,CAAC7B,iBAAZ,CAA8BgF,KAA9B;IACH,CAtBiC,CAuBlC;;;IACA,IAAIiE,MAAM,CAACzJ,QAAP,IAAmByJ,MAAM,CAACzJ,QAAP,GAAkB,CAAzC,EAA4C;MACxCqC,WAAW,CAACJ,WAAZ,GAA0BlB,SAA1B,CAAoC,MAAMsB,WAAW,CAACX,aAAZ,CAA0B+H,MAAM,CAACzJ,QAAjC,CAA1C;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACIgL,cAAc,CAACvB,MAAD,EAAS;IACnB,MAAMsC,aAAa,GAAG,IAAI1O,+DAAJ,EAAtB;IACA0O,aAAa,CAACC,SAAd,GAA0BvC,MAAM,CAACuC,SAAjC;;IACA,IAAIC,gBAAgB,GAAG,KAAKnD,QAAL,CAAcoD,QAAd,GAAyBC,MAAzB,EAAvB,CAHmB,CAInB;;;IACA,MAAMC,KAAK,GAAG3C,MAAM,CAACuC,SAAP,KAAqB,KAAnC;IACA,MAAMK,MAAM,GAAG5C,MAAM,CAACvJ,kBAAP,KAA8B,MAA9B,IACVuJ,MAAM,CAACvJ,kBAAP,KAA8B,OAA9B,IAAyC,CAACkM,KADhC,IAEV3C,MAAM,CAACvJ,kBAAP,KAA8B,KAA9B,IAAuCkM,KAF5C;IAGA,MAAME,OAAO,GAAG,CAACD,MAAD,IAAW5C,MAAM,CAACvJ,kBAAP,KAA8B,QAAzD;;IACA,IAAImM,MAAJ,EAAY;MACRJ,gBAAgB,CAACM,IAAjB,CAAsB,GAAtB;IACH,CAFD,MAGK,IAAID,OAAJ,EAAa;MACdL,gBAAgB,CAACO,KAAjB,CAAuB,GAAvB;IACH,CAFI,MAGA;MACDP,gBAAgB,CAACQ,kBAAjB;IACH,CAlBkB,CAmBnB;;;IACA,IAAIhD,MAAM,CAACtJ,gBAAP,KAA4B,KAAhC,EAAuC;MACnC8L,gBAAgB,CAACS,GAAjB,CAAqB,GAArB;IACH,CAFD,MAGK;MACDT,gBAAgB,CAACU,MAAjB,CAAwB,GAAxB;IACH;;IACDZ,aAAa,CAACE,gBAAd,GAAiCA,gBAAjC;IACA,OAAO,KAAKnD,QAAL,CAAcuB,MAAd,CAAqB0B,aAArB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIZ,eAAe,CAAC1B,MAAD,EAASpH,WAAT,EAAsB;IACjC,MAAM6H,YAAY,GAAGT,MAAM,IAAIA,MAAM,CAACU,gBAAjB,IAAqCV,MAAM,CAACU,gBAAP,CAAwBC,QAAlF;IACA,OAAO7L,0DAAA,CAAgB;MACnB8K,MAAM,EAAEa,YAAY,IAAI,KAAKnB,SADV;MAEnBuB,SAAS,EAAE,CACP;QAAEC,OAAO,EAAEhK,cAAX;QAA2BiK,QAAQ,EAAEnI;MAArC,CADO,EAEP;QAAEkI,OAAO,EAAE5K,kBAAX;QAA+B6K,QAAQ,EAAEf,MAAM,CAACxJ;MAAhD,CAFO;IAFQ,CAAhB,CAAP;EAOH;;AAnNkB;;AAqNvB4I,gBAAgB,CAACrG,IAAjB;EAAA,iBAA6GqG,gBAA7G,EA/fiG/K,sDA+fjG,CAA+IX,yDAA/I,GA/fiGW,sDA+fjG,CAAwK0B,6DAAxK,GA/fiG1B,sDA+fjG,CAAuMA,mDAAvM,GA/fiGA,sDA+fjG,CAA+N2B,oEAA/N,GA/fiG3B,sDA+fjG,CAAmQ+K,gBAAnQ,OA/fiG/K,sDA+fjG,CAAgU2K,6BAAhU;AAAA;;AACAI,gBAAgB,CAACkE,KAAjB,kBAhgBiGjP,gEAggBjG;EAAA,OAAiH+K,gBAAjH;EAAA,SAAiHA,gBAAjH;AAAA;;AACA;EAAA,mDAjgBiG/K,+DAigBjG,CAA2F+K,gBAA3F,EAAyH,CAAC;IAC9GjG,IAAI,EAAEnE,qDAAUA;EAD8F,CAAD,CAAzH,EAE4B,YAAY;IAAE,OAAO,CAAC;MAAEmE,IAAI,EAAEzF,yDAAYyP;IAApB,CAAD,EAAyB;MAAEhK,IAAI,EAAEpD,6DAAkBqN;IAA1B,CAAzB,EAAuD;MAAEjK,IAAI,EAAE9E,mDAAWS;IAAnB,CAAvD,EAA8E;MAAEqE,IAAI,EAAEnD,oEAAuBqN;IAA/B,CAA9E,EAAiH;MAAElK,IAAI,EAAEiG,gBAAR;MAA0BtF,UAAU,EAAE,CAAC;QACrLX,IAAI,EAAElE,mDAAQA;MADuK,CAAD,EAErL;QACCkE,IAAI,EAAEjE,mDAAQA;MADf,CAFqL;IAAtC,CAAjH,EAI3B;MAAEiE,IAAI,EAAEhD,iBAAR;MAA2B2D,UAAU,EAAE,CAAC;QAC1CX,IAAI,EAAEzE,iDADoC;QAE1C0E,IAAI,EAAE,CAAC4F,6BAAD;MAFoC,CAAD;IAAvC,CAJ2B,CAAP;EAOlB,CATxB;AAAA;AAUA;AACA;AACA;;;AACA,MAAMuE,WAAN,SAA0BnE,gBAA1B,CAA2C;EACvChJ,WAAW,CAACoN,OAAD,EAAUC,IAAV,EAAgB9C,QAAhB,EAA0B+C,kBAA1B,EAA8CC,cAA9C,EAA8DC,aAA9D,EAA6E;IACpF,MAAMJ,OAAN,EAAeC,IAAf,EAAqB9C,QAArB,EAA+B+C,kBAA/B,EAAmDC,cAAnD,EAAmEC,aAAnE;IACA,KAAKtD,uBAAL,GAA+B3H,cAA/B;IACA,KAAKsI,0BAAL,GAAkC1C,oBAAlC;IACA,KAAK0D,eAAL,GAAuB,uBAAvB;EACH;;AANsC;;AAQ3CsB,WAAW,CAACxK,IAAZ;EAAA,iBAAwGwK,WAAxG,EAthBiGlP,sDAshBjG,CAAqIX,yDAArI,GAthBiGW,sDAshBjG,CAA8J0B,6DAA9J,GAthBiG1B,sDAshBjG,CAA6LA,mDAA7L,GAthBiGA,sDAshBjG,CAAqN2B,oEAArN,GAthBiG3B,sDAshBjG,CAAyPkP,WAAzP,OAthBiGlP,sDAshBjG,CAAiT2K,6BAAjT;AAAA;;AACAuE,WAAW,CAACD,KAAZ,kBAvhBiGjP,gEAuhBjG;EAAA,OAA4GkP,WAA5G;EAAA,SAA4GA,WAA5G;EAAA,YAAqI7E;AAArI;;AACA;EAAA,mDAxhBiGrK,+DAwhBjG,CAA2FkP,WAA3F,EAAoH,CAAC;IACzGpK,IAAI,EAAEnE,qDADmG;IAEzGoE,IAAI,EAAE,CAAC;MAAE6F,UAAU,EAAEP;IAAd,CAAD;EAFmG,CAAD,CAApH,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAEvF,IAAI,EAAEzF,yDAAYyP;IAApB,CAAD,EAAyB;MAAEhK,IAAI,EAAEpD,6DAAkBqN;IAA1B,CAAzB,EAAuD;MAAEjK,IAAI,EAAE9E,mDAAWS;IAAnB,CAAvD,EAA8E;MAAEqE,IAAI,EAAEnD,oEAAuBqN;IAA/B,CAA9E,EAAiH;MAAElK,IAAI,EAAEoK,WAAR;MAAqBzJ,UAAU,EAAE,CAAC;QAChLX,IAAI,EAAElE,mDAAQA;MADkK,CAAD,EAEhL;QACCkE,IAAI,EAAEjE,mDAAQA;MADf,CAFgL;IAAjC,CAAjH,EAI3B;MAAEiE,IAAI,EAAEhD,iBAAR;MAA2B2D,UAAU,EAAE,CAAC;QAC1CX,IAAI,EAAEzE,iDADoC;QAE1C0E,IAAI,EAAE,CAAC4F,6BAAD;MAFoC,CAAD;IAAvC,CAJ2B,CAAP;EAOlB,CAVxB;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/login.module.ts","./node_modules/@angular/material/fesm2020/snack-bar.mjs"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { QuicklinkModule } from 'ngx-quicklink';\nimport { VexRoutes } from 'src/@vex/interfaces/vex-route.interface';\nimport { LoginComponent } from './login.component';\n\n\n\nconst routes: VexRoutes = [\n  {\n    path: '',\n    component: LoginComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule, QuicklinkModule]\n})\nexport class LoginRoutingModule {\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { fadeInUp400ms } from 'src/@vex/animations/fade-in-up.animation';\nimport { AuthenticationService } from './authentication.service';\n\n\n@Component({\n  selector: 'vex-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeInUp400ms\n  ]\n})\nexport class LoginComponent implements OnInit {\n\n  form: UntypedFormGroup;\n\n  inputType = 'password';\n  visible = false;\n\n  username = ''\n  password = ''\n  invalidLogin = false\n\n  constructor(private router: Router,\n    private fb: UntypedFormBuilder,\n    private cd: ChangeDetectorRef,\n    private snackbar: MatSnackBar,\n    private loginservice: AuthenticationService\n  ) { }\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userName: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n    console.log(this.form.value)\n  }\n\n  send() {\n    // this.router.navigate(['/']);\n    if (this.loginservice.authenticate(this.form.value.userName, this.form.value.password)\n    ) {\n      this.router.navigate(['/']);\n      this.invalidLogin = false\n\n      console.log(this.form.value)\n    } else {\n      alert(\"Incorrect User Name or Password\")\n      this.invalidLogin = true\n      // this.router.navigate(['/']);\n      console.log(this.form.value)\n    }\n\n  }\n\n\n  onReset() {\n    this.form.reset();\n\n  }\n\n  toggleVisibility() {\n    if (this.visible) {\n      this.inputType = 'password';\n      this.visible = false;\n      this.cd.markForCheck();\n    } else {\n      this.inputType = 'text';\n      this.visible = true;\n      this.cd.markForCheck();\n    }\n  }\n}\n","<div class=\"w-full h-full bg-pattern flex flex-col items-center justify-center\">\n  <div @fadeInUp class=\"card overflow-hidden w-full max-w-xs\">\n    <div class=\"p-6 pb-0 flex flex-col items-center justify-center\">\n      <div class=\"fill-current text-center\">\n        <img class=\"w-16\" src=\"\">\n      </div>\n    </div>\n\n    <div class=\"text-center mt-4\">\n      <h2 class=\"title m-0\">EPG VACANCY ADMIN</h2>\n      <h6 class=\"body-2 text-secondary m-0\">Sign in with your credentials below.</h6>\n    </div>\n\n    <div [formGroup]=\"form\" class=\"p-6 flex flex-col gap-4\">\n      <div class=\"flex flex-col\">\n        <mat-form-field class=\"flex-1\">\n          <mat-label>user Name</mat-label>\n          <input formControlName=\"userName\" matInput required>\n          <mat-error *ngIf=\"form.get('userName').hasError('required')\">We need a user Name to log you in</mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"flex-1\">\n          <mat-label>Password</mat-label>\n          <input [type]=\"inputType\" formControlName=\"password\" matInput required (keyup.enter)=\"send()\">\n          <button (click)=\"toggleVisibility()\" mat-icon-button matSuffix matTooltip=\"Toggle Visibility\" type=\"button\">\n            <mat-icon *ngIf=\"visible\" svgIcon=\"mat:visibility\"></mat-icon>\n            <mat-icon *ngIf=\"!visible\" svgIcon=\"mat:visibility_off\"></mat-icon>\n          </button>\n          <mat-hint>Click the eye to toggle visibility</mat-hint>\n          <mat-error *ngIf=\"form.get('password').hasError('required')\">We need a password to log you in</mat-error>\n        </mat-form-field>\n      </div>\n\n      <!-- <div class=\"flex items-center justify-between\">\n        <mat-checkbox class=\"caption\" color=\"primary\">Remember Me</mat-checkbox>\n\n      </div> -->\n\n      <button (click)=\"send()\" color=\"primary\" mat-raised-button type=\"button\">\n        Login\n      </button>\n      <button (click)=\"onReset()\" color=\"primary\" mat-raised-button type=\"button\">\n        Reset\n      </button>\n\n\n    </div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    LoginRoutingModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatIconModule,\n    MatSnackBarModule,\n\n    MatTooltipModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    FormsModule\n  ]\n})\nexport class LoginModule {\n}\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Directive, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\n_MatSnackBarContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSnackBarContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"],"names":["i1$1","OverlayModule","OverlayConfig","i3$1","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","i2","CommonModule","i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","Directive","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","MatCommonModule","i3","MatButtonModule","Subject","i1","take","takeUntil","trigger","state","style","transition","animate","i2$1","i3$2","Breakpoints","MAT_SNACK_BAR_DATA","MatSnackBarConfig","constructor","politeness","announcementMessage","duration","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","subscribe","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵfac","ɵcmp","NgIf","MatButton","type","args","selector","encapsulation","None","changeDetection","OnPush","host","template","styles","undefined","decorators","matSnackBarAnimations","snackBarState","transform","opacity","_MatSnackBarContainerBase","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","result","_portalOutlet","_afterPortalAttached","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","ngDevMode","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","NgZone","ElementRef","ChangeDetectorRef","Platform","ɵdir","static","MatSnackBarContainer","Default","animations","MatSnackBarModule","ɵmod","ɵinj","imports","exports","declarations","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","_MatSnackBarBase","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","toggle","handsetCssClass","matches","announce","_animateSnackBar","clear","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","Overlay","LiveAnnouncer","BreakpointObserver","ɵprov","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig"],"sourceRoot":"webpack:///"}